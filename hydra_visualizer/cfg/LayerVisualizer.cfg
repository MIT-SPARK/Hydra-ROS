#!/usr/bin/env python
PACKAGE = "hydra_visualizer"

import dynamic_reconfigure.parameter_generator_catkin as dr_gen  # NOQA

gen = dr_gen.ParameterGenerator()
gen.add("z_offset_scale", dr_gen.double_t, 0, "number of steps of offset to apply", 0.0, -5.0, 10.0)
gen.add("visualize", dr_gen.bool_t, 0, "show layer", False)

# Nodes
nodes = gen.add_group("nodes", type="tab")
nodes.add("marker_scale", dr_gen.double_t, 0, "size of the centroid marker", 0.1, 0.01, 2.0)
nodes.add("marker_color_mode", dr_gen.str_t, 0, "node color adaptor type", "NodeColorAdaptor")
nodes.add("marker_alpha", dr_gen.double_t, 0, "alpha of the centroid marker", 1.0, 0.0, 1.0)
nodes.add("use_sphere_marker", dr_gen.bool_t, 0, "use sphere markers (instead of cubes)", False)

labels = gen.add_group("labels", type="tab")
labels.add("use_label", dr_gen.bool_t, 0, "add text label", False)
labels.add("use_collapsed_label", dr_gen.bool_t, 0, "add text label at mesh", False)
labels.add("label_height", dr_gen.double_t, 0, "height of text label above node", 1.0, 0.0, 5.0)
labels.add("label_scale", dr_gen.double_t, 0, "scale of text label above node", 0.5, 0.05, 5.0)
labels.add("add_label_jitter", dr_gen.bool_t, 0, "add random noise to label z", False)
labels.add("label_jitter_scale", dr_gen.double_t, 0, "amount of jitter to add", 0.2, 0.05, 5.0)

bbox = gen.add_group("bounding_box", type="tab")
bbox.add("use_bounding_box", dr_gen.bool_t, 0, "display bounding box", False)
bbox.add("collapse_bounding_box", dr_gen.bool_t, 0, "draw bounding box at ground level", False)
bbox.add("bounding_box_scale", dr_gen.double_t, 0, "scale of bounding box wireframe", 0.1, 0.001, 1.0)
bbox.add("bounding_box_edge_scale", dr_gen.double_t, 0, "scale of edges drawn to bbox corners", 0.01, 0.001, 1.0)
bbox.add("bounding_box_alpha", dr_gen.double_t, 0, "alpha of bounding boxes", 0.5, 0.0, 1.0)
bbox.add("mesh_edge_break_ratio", dr_gen.double_t, 0, "point at which to break the edge into many edges", 0.5, 0.0, 1.0)

polygons = gen.add_group("polygons", type="tab")
polygons.add("draw_boundaries", dr_gen.bool_t, 0, "display polygon boundaries", False)
polygons.add("collapse_boundary", dr_gen.bool_t, 0, "draw polygons at mesh level", False)
polygons.add("boundary_wireframe_scale", dr_gen.double_t, 0, "scale of boundary wireframe", 0.1, 0.001, 1.0)
polygons.add("boundary_use_node_color", dr_gen.bool_t, 0, "draw polygons using node semantic color", True)
polygons.add("boundary_alpha", dr_gen.double_t, 0, "alpha of boundary", 0.5, 0.0, 1.0)
polygons.add("draw_boundary_ellipse", dr_gen.bool_t, 0, "display minimum bounding ellipse", False)
polygons.add("boundary_ellipse_alpha", dr_gen.double_t, 0, "alpha of bounding ellipse", 0.5, 0.0, 1.0)
polygons.add("draw_frontier_ellipse", dr_gen.bool_t, 0, "display frontier ellipse approximation", False)
polygons.add("draw_mesh_edges", dr_gen.bool_t, 0, "whether or not to draw mesh edges", False)

# Edges
edges = gen.add_group("edges", type="tab")
edges.add("edge_scale", dr_gen.double_t, 0, "intralayer edge size", 0.03, 0.001, 1.0)
edges.add("edge_alpha", dr_gen.double_t, 0, "intralayer edge alpha", 1.0, 0.0, 1.0)
edges.add("edge_use_color", dr_gen.bool_t, 0, "show intralayer edge in color", True)
edges.add("interlayer_edge_use_source", dr_gen.bool_t, 0, "use edge source layer for config", True)
edges.add("interlayer_edge_scale", dr_gen.double_t, 0, "interlayer edge size", 0.03, 0.001, 1.0)
edges.add("interlayer_edge_alpha", dr_gen.double_t, 0, "interlayer edge alpha", 1.0, 0.0, 1.0)
edges.add("interlayer_edge_use_color", dr_gen.bool_t, 0, "show interlayer edge in color", True)
edges.add("interlayer_edge_insertion_skip", dr_gen.int_t, 0, "Number of edges to skip when drawing interlayer edges", 0, 0, 1000)

exit(gen.generate(PACKAGE, PACKAGE, "LayerVisualizer"))
