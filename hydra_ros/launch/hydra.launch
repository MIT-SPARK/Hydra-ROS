<launch>
    <!-- frame arguments -->
    <arg name="robot_id" default="0" doc="unique robot identifier"/>
    <arg name="robot_frame" doc="robot base frame (i.e., robot pose)"/>
    <arg name="odom_frame" default="odom" doc="robot map frame"/>
    <arg name="map_frame" default="map" doc="backend scene graph frame"/>
    <!-- general configuration -->
    <arg name="dataset_name"/>
    <arg name="labelspace_name"/>
    <arg name="hydra_ros_ns" default="hydra_ros_node" doc="Hydra ros node namespace"/>
    <arg name="hydra_config_path" doc="General configuration file for Hydra"/>
    <!-- sensor configuration -->
    <arg name="sensor_min_range" default="0.1" doc="minimum sensor range in meters"/>
    <arg name="sensor_max_range" default="5.0" doc="maximum sensor range in meters"/>

    <!-- ancillary configuration files -->
    <arg name="input_config_path" default="$(find hydra_ros)/config/datasets/$(arg dataset_name).yaml"/>
    <arg name="mesh_segmenter_sinks" default="$(find hydra_ros)/config/sinks/mesh_segmenter_sinks.yaml"/>
    <arg name="gvd_places_sinks" default="$(find hydra_ros)/config/sinks/gvd_places_sinks.yaml"/>
    <arg name="active_window_sinks" default="$(find hydra_ros)/config/sinks/active_window_sinks.yaml"/>
    <arg name="use_gnn_descriptors" default="false"/>
    <arg name="lcd_config_name" default="$(eval 'default_gnn.yaml' if use_gnn_descriptors else 'default.yaml')"/>
    <arg name="lcd_config_path" default="$(find hydra)/config/lcd/$(arg lcd_config_name)"/>
    <!-- labelspace configuration -->
    <arg name="labelspace_dir" default="$(find hydra)/config/label_spaces"/>
    <arg name="labelspace_path" default="$(arg labelspace_dir)/$(arg labelspace_name)_label_space.yaml"/>

    <!-- log message controls -->
    <arg name="min_glog_level" default="0"/>
    <arg name="verbosity" default="0"/>
    <arg name="glog_to_file" default="false"/>
    <arg name="glog_dir" if="$(arg glog_to_file)"/>
    <arg name="glog_file_args" value="$(eval '--logtostderr=0 --log_dir=' + glog_dir if glog_to_file else '')"/>

    <!-- development args -->
    <arg name="debug" default="false"/>
    <arg name="print_missing" default="false" doc="have config utilities print all missing parameters when parsing configs"/>
    <arg name="launch_prefix" value="$(eval 'gdb -ex run --args' if debug else '')"/>

    <!-- parameter files -->
    <group ns="$(arg hydra_ros_ns)">
        <rosparam file="$(arg input_config_path)" subst_value="true"/>
        <rosparam file="$(arg labelspace_path)"/>
        <rosparam file="$(arg hydra_config_path)" subst_value="true"/>
        <rosparam file="$(arg lcd_config_path)"/>
    </group>

    <arg name="pipeline_path" default="$(find hydra_ros)/config/pipelines/default.yaml"/>
    <include file="$(find hydra_ros)/launch/pipeline_config.launch" pass_all_args="true">
        <arg name="pipeline_path" value="$(arg pipeline_path)"/>
    </include>

    <node pkg="hydra_ros"
          type="hydra_ros_node"
          name="$(arg hydra_ros_ns)"
          launch-prefix="$(arg launch_prefix)"
          args="--minloglevel=$(arg min_glog_level) -v=$(arg verbosity) $(arg glog_file_args)"
          required="true"
          output="$(eval 'log' if glog_to_file else 'screen')">
        <env name="TERM" value="xterm-256color"/>
        <param name="print_missing" value="$(arg print_missing)"/>

        <!-- robot configuration -->
        <param name="robot_id" value="$(arg robot_id)"/>
        <param name="odom_frame" value="$(arg odom_frame)"/>
        <param name="robot_frame" value="$(arg robot_frame)"/>
        <param name="map_frame" value="$(arg map_frame)"/>

        <!-- visualization -->
        <rosparam file="$(arg mesh_segmenter_sinks)" ns="frontend/objects"/>
        <rosparam file="$(arg gvd_places_sinks)" ns="frontend/freespace_places"/>
        <rosparam file="$(arg active_window_sinks)" ns="active_window"/>
    </node>

</launch>
