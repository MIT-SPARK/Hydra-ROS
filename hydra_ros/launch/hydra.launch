<launch>
    <!-- frame arguments -->
    <arg name="robot_id" default="0" doc="unique robot identifier"/>
    <arg name="robot_frame" doc="robot base frame (i.e., robot pose)"/>
    <arg name="odom_frame" default="odom" doc="robot map frame"/>
    <arg name="map_frame" default="map" doc="backend scene graph frame"/>
    <arg name="config_dir"/>
    <arg name="dataset_name"/>
    <arg name="labelspace_name"/>
    <arg name="use_gnn_descriptors" default="false"/>

    <!-- sensor configuration -->
    <arg name="sensor_min_range" default="0.1" doc="minimum sensor range in meters"/>
    <arg name="sensor_max_range" default="5.0" doc="maximum sensor range in meters"/>

    <!-- parameter files -->
    <arg name="input_config_path" default="$(find hydra_ros)/config/datasets/$(arg dataset_name).yaml"/>
    <arg name="reconstruction_config_path" default="$(arg config_dir)/reconstruction_config.yaml"/>
    <arg name="frontend_config_path" default="$(arg config_dir)/frontend_config.yaml"/>
    <arg name="backend_config_path" default="$(arg config_dir)/backend_config.yaml"/>
    <arg name="mesh_segmenter_sinks" default="$(find hydra_ros)/config/mesh_segmenter_sinks.yaml"/>
    <arg name="gvd_places_sinks" default="$(find hydra_ros)/config/gvd_places_sinks.yaml"/>
    <arg name="reconstruction_sinks" default="$(find hydra_ros)/config/reconstruction_sinks.yaml"/>
    <!-- labelspace configuration -->
    <arg name="labelspace_dir" default="$(find hydra)/config/label_spaces"/>
    <arg name="labelspace_path" default="$(arg labelspace_dir)/$(arg labelspace_name)_label_space.yaml"/>
    <arg name="lcd_config_name" default="$(eval 'gnn_lcd_config.yaml' if arg('use_gnn_descriptors') else 'lcd_config.yaml')"/>
    <arg name="lcd_config_path" default="$(find hydra)/config/default/$(arg lcd_config_name)"/>

    <!-- log message controls -->
    <arg name="min_glog_level" default="0"/>
    <arg name="verbosity" default="0"/>
    <arg name="glog_to_file" default="false"/>
    <arg name="glog_dir" if="$(arg glog_to_file)"/>
    <arg name="glog_file_args" value="$(eval '--logtostderr=0 --log_dir=' + arg('glog_dir') if arg('glog_to_file') else '')"/>

    <arg name="ros_output" value="$(eval 'log' if arg('glog_to_file') else 'screen')" />

    <!-- development args -->
    <arg name="debug" default="false"/>
    <arg name="print_missing" default="false" doc="have config utilities print all missing parameters when parsing configs"/>
    <arg name="launch_prefix" value="$(eval 'gdb -ex run --args' if arg('debug') else '')" />

    <!-- parameter files -->
    <rosparam file="$(arg labelspace_path)" ns="hydra_ros_node"/>
    <rosparam file="$(arg input_config_path)" ns="hydra_ros_node/input" subst_value="true"/>
    <rosparam file="$(arg reconstruction_config_path)" ns="hydra_ros_node/reconstruction"/>
    <rosparam file="$(arg frontend_config_path)" ns="hydra_ros_node/frontend"/>
    <rosparam file="$(arg backend_config_path)" ns="hydra_ros_node/backend"/>
    <rosparam file="$(arg lcd_config_path)" ns="hydra_ros_node"/>

    <arg name="pipeline_path" default="$(find hydra_ros)/config/ros_pipeline.yaml"/>
    <include file="$(find hydra_ros)/launch/pipeline_config.launch" pass_all_args="true">
        <arg name="pipeline_path" value="$(arg pipeline_path)"/>
    </include>

    <node pkg="hydra_ros"
          type="hydra_ros_node"
          name="hydra_ros_node"
          launch-prefix="$(arg launch_prefix)"
          args="--minloglevel=$(arg min_glog_level) -v=$(arg verbosity) $(arg glog_file_args)"
          required="true"
          output="$(arg ros_output)">
        <env name="TERM" value="xterm-256color"/>
        <param name="print_missing" value="$(arg print_missing)"/>

        <!-- robot configuration -->
        <param name="robot_id" value="$(arg robot_id)"/>
        <param name="odom_frame" value="$(arg odom_frame)"/>
        <param name="robot_frame" value="$(arg robot_frame)"/>
        <param name="map_frame" value="$(arg map_frame)"/>


        <!-- visualization -->
        <rosparam file="$(arg mesh_segmenter_sinks)" ns="frontend/objects"/>
        <rosparam file="$(arg gvd_places_sinks)" ns="frontend/freespace_places"/>
        <rosparam file="$(arg reconstruction_sinks)" ns="reconstruction"/>
    </node>

</launch>
